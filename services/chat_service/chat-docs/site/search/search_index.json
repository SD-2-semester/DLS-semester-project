{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to chat-service","text":""},{"location":"api/","title":"API Documentation","text":"<p>This documentation covers the API endpoints provided by the FastAPI application.</p>"},{"location":"api/#overview","title":"Overview","text":"<p>Below is an overview of the available endpoints and their corresponding documentation.</p> Endpoint Description Documentation Link Chat Handles chat operations Chat ChatMessage Manages chat messages ChatMessage Demo Demonstration purposes Demo Echo Echoes the input for testing Echo Monitoring Monitoring the application status Monitoring Server Manages server details Server ServerMember Manages server members ServerMember ServerMessage Manages messages in the server ServerMessage Websocket Handles websocket connections Websocket"},{"location":"api/chat/","title":"Chat Endpoints","text":""},{"location":"api/chat/#chat_service.web.api.chat.views.create_chat","title":"<code>create_chat(input_dto, r_daos, w_daos)</code>  <code>async</code>","text":"<p>Create a chat between two users.</p> Source code in <code>chat_service/web/api/chat/views.py</code> <pre><code>@router.post(\"\", status_code=201)\nasync def create_chat(\n    input_dto: dtos.ChatInputDTO,\n    r_daos: ReadDAOs,\n    w_daos: WriteDAOs,\n) -&gt; dtos.DefaultCreatedResponse:\n    \"\"\"Create a chat between two users.\"\"\"\n\n    existing_chat = await r_daos.chat.filter_one(\n        user_id_1=input_dto.user_id_1,\n        user_id_2=input_dto.user_id_2,\n    )\n\n    if existing_chat is not None:\n        raise exceptions.Http403(\"Chat between users already exists.\")\n\n    obj_id = await w_daos.chat.create(input_dto)\n\n    return dtos.DefaultCreatedResponse(\n        data=dtos.CreatedResponse(id=obj_id),\n    )\n</code></pre>"},{"location":"api/chat/#chat_service.web.api.chat.views.get_all_chats","title":"<code>get_all_chats(r_daos, pagination)</code>  <code>async</code>","text":"<p>Get all chats (for testing purposes).</p> Source code in <code>chat_service/web/api/chat/views.py</code> <pre><code>@router.get(\"\")\nasync def get_all_chats(\n    r_daos: ReadDAOs,\n    pagination: Pagination,\n) -&gt; dtos.OffsetResults[dtos.ChatDTO]:\n    \"\"\"Get all chats (for testing purposes).\"\"\"\n\n    return await r_daos.chat.get_offset_results(\n        pagination=pagination, out_dto=dtos.ChatDTO\n    )\n</code></pre>"},{"location":"api/chat/#chat_service.web.api.chat.views.get_chats_where_is_participant","title":"<code>get_chats_where_is_participant(user_id, r_daos, pagination)</code>  <code>async</code>","text":"<p>Get all chats where user is a participant.</p> Source code in <code>chat_service/web/api/chat/views.py</code> <pre><code>@router.get(\"/users/{user_id}\")\nasync def get_chats_where_is_participant(\n    user_id: UUID,\n    r_daos: ReadDAOs,\n    pagination: Pagination,\n) -&gt; dtos.OffsetResults[dtos.ChatDTO]:\n    \"\"\"Get all chats where user is a participant.\"\"\"\n\n    query = sa.select(Chat).where(\n        sa.or_(\n            Chat.user_id_1 == user_id,\n            Chat.user_id_2 == user_id,\n        )\n    )\n\n    return await r_daos.chat.get_offset_results(\n        pagination=pagination,\n        out_dto=dtos.ChatDTO,\n        query=query,\n    )\n</code></pre>"},{"location":"api/chat_message/","title":"Chat Message Endpoints","text":""},{"location":"api/chat_message/#chat_service.web.api.chat_message.views.create_chat_message","title":"<code>create_chat_message(chat, elastic, rmq, http_client, user_id, request_dto, w_daos)</code>  <code>async</code>","text":"<p>Create message in a given chat.</p> Source code in <code>chat_service/web/api/chat_message/views.py</code> <pre><code>@router.post(_path, status_code=201)\nasync def create_chat_message(\n    chat: GetChatIfParticipant,\n    elastic: GetES,\n    rmq: GetRMQ,\n    http_client: GetHttpClient,\n    user_id: UUID,\n    request_dto: dtos.ChatMessageRequestDTO,\n    w_daos: WriteDAOs,\n) -&gt; dtos.DefaultCreatedResponse:\n    \"\"\"Create message in a given chat.\"\"\"\n\n    obj_id = await w_daos.chat_message.create(\n        input_dto=dtos.ChatMessageInputDTO(\n            chat_id=chat.id,\n            **request_dto.model_dump(),\n        ),\n    )\n\n    other_user_id = chat.user_id_1 if chat.user_id_1 == user_id else chat.user_id_2\n    if ws_manager.is_user_in_room(str(other_user_id), str(chat.id)):\n        await ws_manager.broadcast(\n            str(chat.id),\n            message=dtos.ChatPublishDTO(\n                message=request_dto.message,\n                chat_id=chat.id,\n            ),\n        )\n\n    await elastic.post_message(\n        index=\"chat_message\",\n        dto=dtos.ChatElasticCreateDTO(\n            chat_id=chat.id,\n            message=request_dto.message,\n        ),\n    )\n\n    user_info = (\n        await http_client.get(\n            f\"{settings.auth_service_url}/users/{user_id}\",\n        )\n    )[\"data\"]\n\n    await rmq.notify_new_chat_message(\n        message=dtos.RMQChatNotificationDTO(\n            chat_id=chat.id,\n            user_id_1=chat.user_id_1,\n            user_id_2=chat.user_id_2,\n            message=request_dto.message,\n            sender_username=user_info[\"username\"],\n        ),\n    )\n\n    return dtos.DefaultCreatedResponse(\n        data=dtos.CreatedResponse(id=obj_id),\n    )\n</code></pre>"},{"location":"api/chat_message/#chat_service.web.api.chat_message.views.get_messages_by_chat","title":"<code>get_messages_by_chat(chat, r_daos, pagination)</code>  <code>async</code>","text":"<p>Get messages by given chat.</p> Source code in <code>chat_service/web/api/chat_message/views.py</code> <pre><code>@router.get(_path)\nasync def get_messages_by_chat(\n    chat: GetChatIfParticipant,\n    r_daos: ReadDAOs,\n    pagination: Pagination,\n) -&gt; dtos.OffsetResults[dtos.ChatMessageDTO]:\n    \"\"\"Get messages by given chat.\"\"\"\n\n    query = (\n        sa.select(ChatMessage)\n        .join(\n            Chat,\n            ChatMessage.chat_id == Chat.id,\n        )\n        .where(\n            ChatMessage.chat_id == chat.id,\n        )\n    )\n\n    return await r_daos.chat_message.get_offset_results(\n        pagination=pagination,\n        out_dto=dtos.ChatMessageDTO,\n        query=query,\n    )\n</code></pre>"},{"location":"api/demo/","title":"Demo Endpoints","text":""},{"location":"api/demo/#chat_service.web.api.chat.views.create_chat","title":"<code>create_chat(input_dto, r_daos, w_daos)</code>  <code>async</code>","text":"<p>Create a chat between two users.</p> Source code in <code>chat_service/web/api/chat/views.py</code> <pre><code>@router.post(\"\", status_code=201)\nasync def create_chat(\n    input_dto: dtos.ChatInputDTO,\n    r_daos: ReadDAOs,\n    w_daos: WriteDAOs,\n) -&gt; dtos.DefaultCreatedResponse:\n    \"\"\"Create a chat between two users.\"\"\"\n\n    existing_chat = await r_daos.chat.filter_one(\n        user_id_1=input_dto.user_id_1,\n        user_id_2=input_dto.user_id_2,\n    )\n\n    if existing_chat is not None:\n        raise exceptions.Http403(\"Chat between users already exists.\")\n\n    obj_id = await w_daos.chat.create(input_dto)\n\n    return dtos.DefaultCreatedResponse(\n        data=dtos.CreatedResponse(id=obj_id),\n    )\n</code></pre>"},{"location":"api/demo/#chat_service.web.api.chat.views.get_all_chats","title":"<code>get_all_chats(r_daos, pagination)</code>  <code>async</code>","text":"<p>Get all chats (for testing purposes).</p> Source code in <code>chat_service/web/api/chat/views.py</code> <pre><code>@router.get(\"\")\nasync def get_all_chats(\n    r_daos: ReadDAOs,\n    pagination: Pagination,\n) -&gt; dtos.OffsetResults[dtos.ChatDTO]:\n    \"\"\"Get all chats (for testing purposes).\"\"\"\n\n    return await r_daos.chat.get_offset_results(\n        pagination=pagination, out_dto=dtos.ChatDTO\n    )\n</code></pre>"},{"location":"api/demo/#chat_service.web.api.chat.views.get_chats_where_is_participant","title":"<code>get_chats_where_is_participant(user_id, r_daos, pagination)</code>  <code>async</code>","text":"<p>Get all chats where user is a participant.</p> Source code in <code>chat_service/web/api/chat/views.py</code> <pre><code>@router.get(\"/users/{user_id}\")\nasync def get_chats_where_is_participant(\n    user_id: UUID,\n    r_daos: ReadDAOs,\n    pagination: Pagination,\n) -&gt; dtos.OffsetResults[dtos.ChatDTO]:\n    \"\"\"Get all chats where user is a participant.\"\"\"\n\n    query = sa.select(Chat).where(\n        sa.or_(\n            Chat.user_id_1 == user_id,\n            Chat.user_id_2 == user_id,\n        )\n    )\n\n    return await r_daos.chat.get_offset_results(\n        pagination=pagination,\n        out_dto=dtos.ChatDTO,\n        query=query,\n    )\n</code></pre>"},{"location":"api/demo/#chat_service.web.api.demo.views.demo_get_messages","title":"<code>demo_get_messages(elastic, server_id, search=Query(...))</code>  <code>async</code>","text":"<p>Demo get messages.</p> <p>:returns: list of messages.</p> Source code in <code>chat_service/web/api/demo/views.py</code> <pre><code>@router.get(\"/es/{server_id}\")\nasync def demo_get_messages(\n    elastic: GetES,\n    server_id: UUID,\n    search: str = Query(...),\n) -&gt; list[dtos.ServerElasticDTO]:\n    \"\"\"\n    Demo get messages.\n\n    :returns: list of messages.\n    \"\"\"\n    return await elastic.search_messages(\n        obj_id=server_id,\n        index=\"server_message\",\n        message=search,\n        out_dto=dtos.ServerElasticDTO,\n    )\n</code></pre>"},{"location":"api/demo/#chat_service.web.api.demo.views.demo_notify_new_server_message","title":"<code>demo_notify_new_server_message(rmq, message)</code>  <code>async</code>","text":"<p>Demo notify new server message.</p> <p>:returns: notified message.</p> Source code in <code>chat_service/web/api/demo/views.py</code> <pre><code>@router.post(\"/rmq\")\nasync def demo_notify_new_server_message(\n    rmq: GetRMQ,\n    message: dtos.RMQServerNotificationDTO,\n) -&gt; dtos.RMQServerNotificationDTO:\n    \"\"\"\n    Demo notify new server message.\n\n    :returns: notified message.\n    \"\"\"\n    await rmq.notify_new_server_message(message=message)\n    return message\n</code></pre>"},{"location":"api/demo/#chat_service.web.api.demo.views.demo_post_message","title":"<code>demo_post_message(elastic, message)</code>  <code>async</code>","text":"<p>Demo post message.</p> <p>:returns: posted message.</p> Source code in <code>chat_service/web/api/demo/views.py</code> <pre><code>@router.post(\"/es\")\nasync def demo_post_message(\n    elastic: GetES,\n    message: dtos.ServerElasticCreateDTO,\n) -&gt; dtos.ServerElasticCreateDTO:\n    \"\"\"\n    Demo post message.\n\n    :returns: posted message.\n    \"\"\"\n    await elastic.post_message(index=\"server_message\", dto=message)\n    return message\n</code></pre>"},{"location":"api/echo/","title":"Echo Endpoints","text":""},{"location":"api/echo/#chat_service.web.api.echo.views.send_echo_message","title":"<code>send_echo_message(incoming_message)</code>  <code>async</code>","text":"<p>Sends echo back to user.</p> <p>:param incoming_message: incoming message. :returns: message same as the incoming.</p> Source code in <code>chat_service/web/api/echo/views.py</code> <pre><code>@router.post(\"/\", response_model=Message)\nasync def send_echo_message(\n    incoming_message: Message,\n) -&gt; Message:\n    \"\"\"\n    Sends echo back to user.\n\n    :param incoming_message: incoming message.\n    :returns: message same as the incoming.\n    \"\"\"\n    return incoming_message\n</code></pre>"},{"location":"api/monitoring/","title":"Monitoring Endpoints","text":""},{"location":"api/monitoring/#chat_service.web.api.monitoring.views.health_check","title":"<code>health_check()</code>","text":"<p>Checks the health of a project.</p> <p>It returns 200 if the project is healthy.</p> Source code in <code>chat_service/web/api/monitoring/views.py</code> <pre><code>@router.get(\"/health\")\ndef health_check() -&gt; None:\n    \"\"\"\n    Checks the health of a project.\n\n    It returns 200 if the project is healthy.\n    \"\"\"\n</code></pre>"},{"location":"api/server/","title":"Server Endpoints","text":""},{"location":"api/server/#chat_service.web.api.server.views.create_server","title":"<code>create_server(input_dto, r_daos, w_daos)</code>  <code>async</code>","text":"<p>Create a server.</p> Source code in <code>chat_service/web/api/server/views.py</code> <pre><code>@router.post(\"\", status_code=201)\nasync def create_server(\n    input_dto: dtos.ServerInputDTO,\n    r_daos: ReadDAOs,\n    w_daos: WriteDAOs,\n) -&gt; dtos.DefaultCreatedResponse:\n    \"\"\"Create a server.\"\"\"\n\n    existing_server = await r_daos.server.filter_one(title=input_dto.title)\n\n    if existing_server is not None:\n        raise exceptions.Http403(\n            f\"Server with title '{input_dto.title}' already exists.\"\n        )\n\n    obj_id = await w_daos.server.create(input_dto)\n\n    return dtos.DefaultCreatedResponse(\n        data=dtos.CreatedResponse(id=obj_id),\n    )\n</code></pre>"},{"location":"api/server/#chat_service.web.api.server.views.get_servers_where_is_member","title":"<code>get_servers_where_is_member(user_id, r_daos, pagination)</code>  <code>async</code>","text":"<p>Get servers that a given user is a member of.</p> Source code in <code>chat_service/web/api/server/views.py</code> <pre><code>@router.get(\"/users/{user_id}\")\nasync def get_servers_where_is_member(\n    user_id: UUID,\n    r_daos: ReadDAOs,\n    pagination: Pagination,\n) -&gt; dtos.OffsetResults[dtos.ServerDTO]:\n    \"\"\"Get servers that a given user is a member of.\"\"\"\n\n    query = (\n        sa.select(models.Server)\n        .join(\n            models.ServerMember,\n            models.Server.id == models.ServerMember.server_id,\n        )\n        .where(models.ServerMember.user_id == user_id)\n    )\n\n    return await r_daos.server.get_offset_results(\n        pagination=pagination,\n        out_dto=dtos.ServerDTO,\n        query=query,\n    )\n</code></pre>"},{"location":"api/server_member/","title":"Server Member Endpoints","text":""},{"location":"api/server_member/#chat_service.web.api.server_member.views.get_members_by_server","title":"<code>get_members_by_server(server, r_daos, pagination)</code>  <code>async</code>","text":"<p>Get servers owned by given user.</p> Source code in <code>chat_service/web/api/server_member/views.py</code> <pre><code>@router.get(\"/servers/{server_id}/users/{user_id}\")\nasync def get_members_by_server(\n    server: GetServerIfMember,\n    r_daos: ReadDAOs,\n    pagination: Pagination,\n) -&gt; dtos.OffsetResults[dtos.ServerMemberDTO]:\n    \"\"\"Get servers owned by given user.\"\"\"\n\n    query = sa.select(models.ServerMember).where(\n        models.Server.id == server.id,\n    )\n\n    return await r_daos.server_member.get_offset_results(\n        pagination=pagination,\n        out_dto=dtos.ServerMemberDTO,\n        query=query,\n    )\n</code></pre>"},{"location":"api/server_member/#chat_service.web.api.server_member.views.join_server","title":"<code>join_server(server, request_dto, r_daos, w_daos)</code>  <code>async</code>","text":"<p>Join server, creating a server member record.</p> Source code in <code>chat_service/web/api/server_member/views.py</code> <pre><code>@router.post(\"/servers/{server_id}\", status_code=201)\nasync def join_server(\n    server: GetServer,\n    request_dto: dtos.ServerMemberRequestDTO,\n    r_daos: ReadDAOs,\n    w_daos: WriteDAOs,\n) -&gt; dtos.DefaultCreatedResponse:\n    \"\"\"Join server, creating a server member record.\"\"\"\n\n    existing_member = await r_daos.server_member.filter_one(\n        user_id=request_dto.user_id,\n    )\n\n    if existing_member is not None:\n        raise exceptions.Http403(\n            f\"User with id '{request_dto.user_id}' is already a member of this server.\"\n        )\n\n    obj_id = await w_daos.server_member.create(\n        input_dto=dtos.ServerMemberInputDTO(\n            server_id=server.id, **request_dto.model_dump()\n        ),\n    )\n\n    return dtos.DefaultCreatedResponse(\n        data=dtos.CreatedResponse(id=obj_id),\n    )\n</code></pre>"},{"location":"api/server_message/","title":"Server Message Endpoints","text":""},{"location":"api/server_message/#chat_service.web.api.server_message.views.create_server_message","title":"<code>create_server_message(server, elastic, rmq, http_client, user_id, request_dto, w_daos)</code>  <code>async</code>","text":"<p>Create server message.</p> Source code in <code>chat_service/web/api/server_message/views.py</code> <pre><code>@router.post(\n    \"/servers/{server_id}/users/{user_id}\",\n    status_code=201,\n)\nasync def create_server_message(\n    server: GetServerIfMember,\n    elastic: GetES,\n    rmq: GetRMQ,\n    http_client: GetHttpClient,\n    user_id: UUID,\n    request_dto: dtos.ServerMessageRequestDTO,\n    w_daos: WriteDAOs,\n) -&gt; dtos.DefaultCreatedResponse:\n    \"\"\"Create server message.\"\"\"\n\n    obj_id = await w_daos.server_message.create(\n        input_dto=dtos.ServerMessageInputDTO(\n            server_id=server.id, **request_dto.model_dump()\n        ),\n    )\n\n    await ws_manager.broadcast(\n        str(server.id),\n        message=dtos.ServerPublishDTO(\n            message=request_dto.message,\n            server_id=server.id,\n        ),\n    )\n\n    await elastic.post_message(\n        index=\"server_message\",\n        dto=dtos.ServerElasticCreateDTO(\n            server_id=server.id,\n            message=request_dto.message,\n        ),\n    )\n\n    user_info = (\n        await http_client.get(\n            f\"{settings.auth_service_url}/users/{user_id}\",\n        )\n    )[\"data\"]\n\n    await rmq.notify_new_server_message(\n        message=dtos.RMQServerNotificationDTO(\n            server_id=server.id,\n            user_id=user_id,\n            message=request_dto.message,\n            sender_username=user_info[\"username\"],\n        ),\n    )\n\n    return dtos.DefaultCreatedResponse(\n        data=dtos.CreatedResponse(id=obj_id),\n    )\n</code></pre>"},{"location":"api/server_message/#chat_service.web.api.server_message.views.get_messages_by_server","title":"<code>get_messages_by_server(server, r_daos, pagination)</code>  <code>async</code>","text":"<p>Get messages by given server.</p> Source code in <code>chat_service/web/api/server_message/views.py</code> <pre><code>@router.get(\"/servers/{server_id}\")\nasync def get_messages_by_server(\n    server: GetServerIfMember,\n    r_daos: ReadDAOs,\n    pagination: Pagination,\n) -&gt; dtos.OffsetResults[dtos.ServerMessageDTO]:\n    \"\"\"Get messages by given server.\"\"\"\n\n    query = sa.select(models.ServerMessage).where(\n        models.ServerMessage.server_id == server.id,\n    )\n\n    return await r_daos.server_message.get_offset_results(\n        pagination=pagination,\n        out_dto=dtos.ServerMessageDTO,\n        query=query,\n    )\n</code></pre>"},{"location":"api/ws/","title":"Websocket Endpoints","text":""},{"location":"api/ws/#chat_service.web.api.ws.views.ws_chat_connect","title":"<code>ws_chat_connect(chat, websocket, background_tasks)</code>  <code>async</code>","text":"<p>Connect to chat websocket.</p> Source code in <code>chat_service/web/api/ws/views.py</code> <pre><code>@router.websocket(\"/chats/{chat_id}/users/{user_id}\")\nasync def ws_chat_connect(\n    chat: GetChatIfParticipant,\n    websocket: WebSocket,\n    background_tasks: BackgroundTasks,\n) -&gt; None:\n    \"\"\"Connect to chat websocket.\"\"\"\n\n    s_room_id = str(chat.id)\n\n    await ws_manager.connect_user(s_room_id, websocket, background_tasks)\n\n    try:\n        while True:\n\n            data = await websocket.receive_text()\n            await ws_manager.broadcast(\n                s_room_id, dtos.ChatPublishDTO(message=data, chat_id=chat.id)\n            )\n    except WebSocketDisconnect:\n        await ws_manager.remove_user(s_room_id, websocket)\n</code></pre>"},{"location":"api/ws/#chat_service.web.api.ws.views.ws_server_connect","title":"<code>ws_server_connect(server, websocket, background_tasks)</code>  <code>async</code>","text":"<p>Connect to server websocket.</p> Source code in <code>chat_service/web/api/ws/views.py</code> <pre><code>@router.websocket(\"/servers/{server_id}/users/{user_id}\")\nasync def ws_server_connect(\n    server: GetServerIfMember,\n    websocket: WebSocket,\n    background_tasks: BackgroundTasks,\n) -&gt; None:\n    \"\"\"Connect to server websocket.\"\"\"\n\n    s_room_id = str(server.id)\n\n    await ws_manager.connect_user(s_room_id, websocket, background_tasks)\n\n    try:\n        while True:\n            data = await websocket.receive_text()\n            await ws_manager.broadcast(\n                s_room_id, dtos.ServerPublishDTO(message=data, server_id=server.id)\n            )\n    except WebSocketDisconnect:\n        await ws_manager.remove_user(s_room_id, websocket)\n</code></pre>"}]}